{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"id\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"colDef\", \"isEditable\", \"cellMode\", \"hasFocus\", \"tabIndex\", \"getValue\", \"api\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useForkRef } from '@mui/material/utils';\nimport { isNavigationKey, isSpaceKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridCellCheckboxForwardRef = /*#__PURE__*/React.forwardRef(function GridCellCheckboxRenderer(props, ref) {\n  var _rootProps$components;\n\n  const {\n    field,\n    id,\n    value: isChecked,\n    hasFocus,\n    tabIndex\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const checkboxElement = React.useRef(null);\n  const rippleRef = React.useRef();\n  const handleRef = useForkRef(checkboxElement, ref);\n  const element = apiRef.current.getCellElement(id, field);\n\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked,\n      id\n    };\n    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);\n  };\n\n  React.useLayoutEffect(() => {\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [element, tabIndex]);\n  React.useLayoutEffect(() => {\n    if (hasFocus) {\n      var _checkboxElement$curr;\n\n      const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector('input');\n      input == null ? void 0 : input.focus();\n    } else if (rippleRef.current) {\n      // Only available in @mui/material v5.4.1 or later\n      rippleRef.current.stop({});\n    }\n  }, [hasFocus]);\n  const handleKeyDown = React.useCallback(event => {\n    if (isSpaceKey(event.key)) {\n      event.stopPropagation();\n    }\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', props, event);\n    }\n  }, [apiRef, props]);\n  const isSelectable = !rootProps.isRowSelectable || rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');\n  return /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n    ref: handleRef,\n    tabIndex: tabIndex,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    color: \"primary\",\n    inputProps: {\n      'aria-label': label\n    },\n    onKeyDown: handleKeyDown,\n    disabled: !isSelectable,\n    touchRippleRef: rippleRef\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellCheckboxForwardRef.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value, but if the column has valueGetter, use getValue.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridCellCheckboxForwardRef };\nexport const GridCellCheckboxRenderer = /*#__PURE__*/React.memo(GridCellCheckboxForwardRef);","map":{"version":3,"sources":["E:/git/ebay/frontend/node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_composeClasses","composeClasses","useForkRef","isNavigationKey","isSpaceKey","useGridApiContext","useGridRootProps","getDataGridUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridCellCheckboxForwardRef","forwardRef","GridCellCheckboxRenderer","props","ref","_rootProps$components","field","id","value","isChecked","hasFocus","tabIndex","other","apiRef","rootProps","checkboxElement","useRef","rippleRef","handleRef","element","current","getCellElement","handleChange","event","params","target","checked","publishEvent","useLayoutEffect","_checkboxElement$curr","input","querySelector","focus","stop","handleKeyDown","useCallback","key","stopPropagation","shiftKey","isSelectable","isRowSelectable","getRowParams","label","getLocaleText","components","BaseCheckbox","onChange","className","color","inputProps","onKeyDown","disabled","touchRippleRef","componentsProps","baseCheckbox","process","env","NODE_ENV","propTypes","api","any","isRequired","cellMode","oneOf","colDef","object","string","focusElementRef","oneOfType","func","shape","formattedValue","getValue","bool","number","isEditable","row","rowNode","memo"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"id\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"colDef\", \"isEditable\", \"cellMode\", \"hasFocus\", \"tabIndex\", \"getValue\", \"api\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useForkRef } from '@mui/material/utils';\nimport { isNavigationKey, isSpaceKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridCellCheckboxForwardRef = /*#__PURE__*/React.forwardRef(function GridCellCheckboxRenderer(props, ref) {\n  var _rootProps$components;\n\n  const {\n    field,\n    id,\n    value: isChecked,\n    hasFocus,\n    tabIndex\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const checkboxElement = React.useRef(null);\n  const rippleRef = React.useRef();\n  const handleRef = useForkRef(checkboxElement, ref);\n  const element = apiRef.current.getCellElement(id, field);\n\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked,\n      id\n    };\n    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);\n  };\n\n  React.useLayoutEffect(() => {\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [element, tabIndex]);\n  React.useLayoutEffect(() => {\n    if (hasFocus) {\n      var _checkboxElement$curr;\n\n      const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector('input');\n      input == null ? void 0 : input.focus();\n    } else if (rippleRef.current) {\n      // Only available in @mui/material v5.4.1 or later\n      rippleRef.current.stop({});\n    }\n  }, [hasFocus]);\n  const handleKeyDown = React.useCallback(event => {\n    if (isSpaceKey(event.key)) {\n      event.stopPropagation();\n    }\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', props, event);\n    }\n  }, [apiRef, props]);\n  const isSelectable = !rootProps.isRowSelectable || rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');\n  return /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n    ref: handleRef,\n    tabIndex: tabIndex,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    color: \"primary\",\n    inputProps: {\n      'aria-label': label\n    },\n    onKeyDown: handleKeyDown,\n    disabled: !isSelectable,\n    touchRippleRef: rippleRef\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellCheckboxForwardRef.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value, but if the column has valueGetter, use getValue.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridCellCheckboxForwardRef };\nexport const GridCellCheckboxRenderer = /*#__PURE__*/React.memo(GridCellCheckboxForwardRef);"]},"metadata":{},"sourceType":"module"}