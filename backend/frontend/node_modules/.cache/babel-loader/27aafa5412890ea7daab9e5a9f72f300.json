{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  const columnsTypes = computeColumnTypes(props.columnTypes);\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$initialState4$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = React.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  /**\n   * If `initialState.columns.columnVisibilityModel` or `columnVisibilityModel` was defined during the 1st render, we are directly updating the model\n   * If not, we keep the old behavior and update the `GridColDef.hide` option (which will update the state model through the `GridColDef.hide` => `columnVisibilityModel` sync in `createColumnsState`\n   */\n\n  const isUsingColumnVisibilityModel = React.useRef(!!props.columnVisibilityModel || !!((_props$initialState4 = props.initialState) != null && (_props$initialState4$ = _props$initialState4.columns) != null && _props$initialState4$.columnVisibilityModel));\n  apiRef.current.unstable_updateControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnsMeta = React.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback(function (field) {\n    let useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          shouldRegenColumnVisibilityModelFromColumns: false,\n          currentColumnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const updateColumn = React.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (isUsingColumnVisibilityModel.current) {\n      var _columnVisibilityMode;\n\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        const newModel = _extends({}, columnVisibilityModel, {\n          [field]: isVisible\n        });\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      const column = apiRef.current.getColumn(field);\n\n      const newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      const params = {\n        field,\n        colDef: newColumn,\n        isVisible\n      };\n      apiRef.current.publishEvent('columnVisibilityChange', params);\n    }\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = allColumns.findIndex(col => col === field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    updatedColumns.splice(targetIndexPosition, 0, updatedColumns.splice(oldIndexPosition, 1)[0]);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    const params = {\n      field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnOrderChange', params);\n  }, [apiRef, logger, setGridColumnsState]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnsMeta,\n    updateColumn,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnIndex,\n    setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const columnsStateToExport = {};\n\n    if (isUsingColumnVisibilityModel.current) {\n      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      const hasHiddenColumns = Object.values(columnVisibilityModelToExport).some(value => value === false);\n\n      if (hasHiddenColumns) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = isUsingColumnVisibilityModel.current ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      const ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}","map":{"version":3,"sources":["E:/git/ebay/frontend/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsMetaSelector","gridColumnsSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","useGridApiEventHandler","useGridApiOptionHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","hydrateColumnsWidth","computeColumnTypes","createColumnsState","mergeColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","jsx","_jsx","columnsStateInitializer","state","props","apiRef","_props$initialState","_props$initialState$c","_props$initialState2","_ref","_props$columnVisibili","_props$initialState3","_props$initialState3$","isUsingColumnVisibilityModel","columnVisibilityModel","initialState","columns","columnsTypes","columnTypes","columnsState","columnsToUpsert","shouldRegenColumnVisibilityModelFromColumns","currentColumnVisibilityModel","keepOnlyColumnsToUpsert","useGridColumns","_props$initialState4","_props$initialState4$","_props$componentsProp2","logger","useMemo","previousColumnsProp","useRef","previousColumnTypesProp","current","unstable_updateControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","forceUpdate","publishEvent","all","getColumn","field","getAllColumns","getVisibleColumns","getColumnsMeta","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateColumns","updateColumn","column","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","newColumn","hide","params","colDef","setColumnIndex","targetIndexPosition","allColumns","oldIndexPosition","updatedColumns","splice","element","getColumnHeaderElement","targetIndex","oldIndex","setColumnWidth","width","columnApi","stateExportPreProcessing","prevState","columnsStateToExport","columnVisibilityModelToExport","hasHiddenColumns","Object","values","some","value","orderedFields","dimensions","forEach","hasBeenResized","colDefDimensions","propertyName","propertyValue","Infinity","keys","length","stateRestorePreProcessing","context","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","_props$componentsProp","ColumnsPanel","components","componentsProps","columnsPanel","prevInnerWidth","handleGridSizeChange","viewportInnerSize","onColumnVisibilityChange","hydrateColumns","info","isFirstRender","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  const columnsTypes = computeColumnTypes(props.columnTypes);\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$initialState4$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = React.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  /**\n   * If `initialState.columns.columnVisibilityModel` or `columnVisibilityModel` was defined during the 1st render, we are directly updating the model\n   * If not, we keep the old behavior and update the `GridColDef.hide` option (which will update the state model through the `GridColDef.hide` => `columnVisibilityModel` sync in `createColumnsState`\n   */\n\n  const isUsingColumnVisibilityModel = React.useRef(!!props.columnVisibilityModel || !!((_props$initialState4 = props.initialState) != null && (_props$initialState4$ = _props$initialState4.columns) != null && _props$initialState4$.columnVisibilityModel));\n  apiRef.current.unstable_updateControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnsMeta = React.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          shouldRegenColumnVisibilityModelFromColumns: false,\n          currentColumnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const updateColumn = React.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (isUsingColumnVisibilityModel.current) {\n      var _columnVisibilityMode;\n\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        const newModel = _extends({}, columnVisibilityModel, {\n          [field]: isVisible\n        });\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      const column = apiRef.current.getColumn(field);\n\n      const newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      const params = {\n        field,\n        colDef: newColumn,\n        isVisible\n      };\n      apiRef.current.publishEvent('columnVisibilityChange', params);\n    }\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = allColumns.findIndex(col => col === field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    updatedColumns.splice(targetIndexPosition, 0, updatedColumns.splice(oldIndexPosition, 1)[0]);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    const params = {\n      field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnOrderChange', params);\n  }, [apiRef, logger, setGridColumnsState]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnsMeta,\n    updateColumn,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnIndex,\n    setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const columnsStateToExport = {};\n\n    if (isUsingColumnVisibilityModel.current) {\n      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      const hasHiddenColumns = Object.values(columnVisibilityModelToExport).some(value => value === false);\n\n      if (hasHiddenColumns) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = isUsingColumnVisibilityModel.current ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      const ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel.current,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}"]},"metadata":{},"sourceType":"module"}